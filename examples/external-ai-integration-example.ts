import { AIModelFactory } from '../lib/ai-model-factory'
import { ExternalAIIntegrator } from '../lib/external-ai-integrator'
import { getErrorMessage } from '../lib/error-utils'

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ AI —Å–∏—Å—Ç–µ–º–∞–º–∏
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é, fallback –ª–æ–≥–∏–∫—É –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
 */

async function externalAIIntegrationExample() {
  console.log('ü§ñ –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ AI —Å–∏—Å—Ç–µ–º–∞–º–∏\n')

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Model Factory —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
  const aiFactory = new AIModelFactory({
    enableIntelligentRouting: true,
    enableConfigWatch: true,
    logLevel: 'info'
  })

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  setupEventHandlers(aiFactory)

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    console.log('üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Model Factory...')
    await aiFactory.initialize()
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
    const info = aiFactory.getInfo()
    console.log('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:', {
      –º–æ–¥–µ–ª–∏: info.modelsCount,
      –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: info.intelligentRoutingEnabled,
      –≤–Ω–µ—à–Ω–∏–µ–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: info.externalAIIntegratorAvailable
    })

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    await demonstrateRequestMethods(aiFactory)

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await demonstrateMonitoring(aiFactory)

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    await demonstrateConfigurationManagement(aiFactory)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', getErrorMessage(error))
  } finally {
    await aiFactory.shutdown()
    console.log('üîÑ AI Model Factory –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers(aiFactory: AIModelFactory) {
  aiFactory.on('initialized', () => {
    console.log('‚úÖ AI Model Factory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  })

  aiFactory.on('requestSuccess', (data) => {
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ ${data.model} (${data.provider})`)
  })

  aiFactory.on('requestFailed', (data) => {
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ ${data.model} (${data.provider}):`, data.error?.message)
  })

  aiFactory.on('intelligentRoutingSuccess', (data) => {
    console.log(`üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å ${data.selectedModel}, –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${data.latency}–º—Å`)
  })

  aiFactory.on('circuitBreakerOpened', (data) => {
    console.log(`üö® Circuit breaker –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${data.provider} (–æ—à–∏–±–æ–∫: ${data.failureRate}%)`)
  })

  aiFactory.on('providerUnavailable', (data) => {
    console.log(`‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${data.provider} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${data.error}`)
  })

  aiFactory.on('rateLimitExceeded', (data) => {
    console.log(`‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ${data.provider}`)
  })
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
async function demonstrateRequestMethods(aiFactory: AIModelFactory) {
  console.log('\nüì§ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤\n')

  const testMessage = {
    messages: [
      { role: 'user' as const, content: '–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.' }
    ],
    maxTokens: 50,
    temperature: 0.7
  }

  try {
    // 1. –ó–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    console.log('1Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ (gpt-4):')
    try {
      const response1 = await aiFactory.sendRequest('gpt-4', testMessage)
      console.log(`   –û—Ç–≤–µ—Ç: ${response1.content.substring(0, 100)}...`)
      console.log(`   –ú–æ–¥–µ–ª—å: ${response1.model}, –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${response1.provider}`)
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${getErrorMessage(error)}`)
    }

    // 2. –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    console.log('\n2Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:')
    try {
      const response2 = await aiFactory.sendDefaultRequest(testMessage)
      console.log(`   –û—Ç–≤–µ—Ç: ${response2.content.substring(0, 100)}...`)
      console.log(`   –ú–æ–¥–µ–ª—å: ${response2.model}, –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${response2.provider}`)
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${getErrorMessage(error)}`)
    }

    // 3. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
    console.log('\n3Ô∏è‚É£ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è:')
    try {
      const response3 = await aiFactory.sendIntelligentRequest(testMessage)
      console.log(`   –û—Ç–≤–µ—Ç: ${response3.content.substring(0, 100)}...`)
      console.log(`   –ú–æ–¥–µ–ª—å: ${response3.model}, –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${response3.provider}`)
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${getErrorMessage(error)}`)
    }

    // 4. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
    console.log('\n4Ô∏è‚É£ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ–º (groq):')
    try {
      const response4 = await aiFactory.sendIntelligentRequest(testMessage, 'llama-3.1-8b-groq')
      console.log(`   –û—Ç–≤–µ—Ç: ${response4.content.substring(0, 100)}...`)
      console.log(`   –ú–æ–¥–µ–ª—å: ${response4.model}, –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${response4.provider}`)
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${getErrorMessage(error)}`)
    }

  } catch (error) {
    console.log(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: ${getErrorMessage(error)}`)
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function demonstrateMonitoring(aiFactory: AIModelFactory) {
  console.log('\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n')

  try {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–µ–π
    console.log('1Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π:')
    const modelStats = aiFactory.getStats()
    for (const [model, stats] of Object.entries(modelStats)) {
      console.log(`   ${model}: –∑–∞–ø—Ä–æ—Å–æ–≤=${stats.requests}, —É—Å–ø–µ—à–Ω—ã—Ö=${stats.failures}, –æ—à–∏–±–æ–∫=${stats.failures}`)
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    console.log('\n2Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:')
    const externalStats = aiFactory.getExternalAIStats()
    if (externalStats) {
      for (const [provider, stats] of Object.entries(externalStats)) {
        console.log(`   ${provider}:`)
        console.log(`     –ó–∞–ø—Ä–æ—Å–æ–≤: ${stats.requestCount}`)
        console.log(`     –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successCount}`)
        console.log(`     –û—à–∏–±–æ–∫: ${stats.failureCount}`)
        console.log(`     –°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${stats.avgLatency}–º—Å`)
        console.log(`     Circuit breaker: ${stats.circuitBreakerOpen ? '–æ—Ç–∫—Ä—ã—Ç' : '–∑–∞–∫—Ä—ã—Ç'}`)
        console.log(`     –¢–∏–ø: ${stats.provider.type}, –°—Ç–æ–∏–º–æ—Å—Ç—å: ${stats.provider.costTier}`)
      }
    } else {
      console.log('   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:')
    const healthResults = await aiFactory.healthCheckExternalProviders()
    for (const [provider, isHealthy] of Object.entries(healthResults)) {
      console.log(`   ${provider}: ${isHealthy ? '‚úÖ –∑–¥–æ—Ä–æ–≤' : '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`)
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('\n4Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:')
    const recommendations = aiFactory.getOptimizationRecommendations()
    if (recommendations.length > 0) {
      recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`)
      })
    } else {
      console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ')
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${getErrorMessage(error)}`)
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
async function demonstrateConfigurationManagement(aiFactory: AIModelFactory) {
  console.log('\n‚öôÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n')

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('1Ô∏è‚É£ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:')
    const currentConfig = aiFactory.getCurrentConfig()
    console.log(`   –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${currentConfig.defaultModel}`)
    console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π: ${currentConfig.models.length}`)
    console.log(`   Fallback –≤–∫–ª—é—á–µ–Ω: ${currentConfig.fallback.enabled}`)

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    console.log('\n2Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:')
    aiFactory.updateIntelligentRoutingConfig({
      costOptimization: true,
      latencyOptimization: false,
      reliabilityThreshold: 85
    })
    console.log('   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
    console.log('\n3Ô∏è‚É£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π:')
    console.log('   –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...')
    aiFactory.setIntelligentRouting(false)
    console.log(`   –°—Ç–∞—Ç—É—Å: ${aiFactory.getInfo().intelligentRoutingEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`)
    
    console.log('   –í–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...')
    aiFactory.setIntelligentRouting(true)
    console.log(`   –°—Ç–∞—Ç—É—Å: ${aiFactory.getInfo().intelligentRoutingEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`)

    // –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
    console.log('\n4Ô∏è‚É£ –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:')
    aiFactory.resetProviderMetrics('openai')
    console.log('   ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ OpenAI —Å–±—Ä–æ—à–µ–Ω—ã')

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    console.log('\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:')
    try {
      const backupPath = await aiFactory.backupConfig()
      console.log(`   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`)
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${getErrorMessage(error)}`)
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: ${getErrorMessage(error)}`)
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ fallback –ª–æ–≥–∏–∫–∏
async function demonstrateFallbackLogic(aiFactory: AIModelFactory) {
  console.log('\nüîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è fallback –ª–æ–≥–∏–∫–∏\n')

  const testMessage = {
    messages: [
      { role: 'user' as const, content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ fallback' }
    ],
    maxTokens: 30
  }

  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
    console.log('1Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏:')
    try {
      await aiFactory.sendRequest('non-existent-model', testMessage)
    } catch (error) {
      console.log(`   ‚ùå –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: ${getErrorMessage(error)}`)
    }

    // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
    console.log('\n2Ô∏è‚É£ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º:')
    try {
      const response = await aiFactory.sendIntelligentRequest(testMessage)
      console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${response.model} (${response.provider})`)
    } catch (error) {
      console.log(`   ‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${getErrorMessage(error)}`)
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ fallback: ${getErrorMessage(error)}`)
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  externalAIIntegrationExample()
    .then(() => {
      console.log('\nüéâ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\nüí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞:', error)
      process.exit(1)
    })
}

export { externalAIIntegrationExample }