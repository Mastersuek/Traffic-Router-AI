import { MCPClient, MCPUtils } from '../lib/mcp-client'
import { getErrorMessage } from '../lib/error-utils'

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MCP (Model Context Protocol) –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º, –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç—É —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
 */

async function mcpIntegrationExample() {
  console.log('üîå –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MCP (Model Context Protocol)\n')

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞
  const mcpClient = new MCPClient('.kiro/settings/mcp.json')

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  setupEventHandlers(mcpClient)

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º MCP —Å–µ—Ä–≤–µ—Ä–∞–º
    console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º...')
    await mcpClient.connectAll()

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
    await demonstrateServerStatus(mcpClient)

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    await demonstrateTools(mcpClient)

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
    await demonstrateResources(mcpClient)

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
    await demonstratePrompts(mcpClient)

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é
    await demonstrateMemoryOperations(mcpClient)

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await demonstrateSystemMonitoring(mcpClient)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', getErrorMessage(error))
  } finally {
    await mcpClient.shutdown()
    console.log('üîÑ MCP –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventHandlers(mcpClient: MCPClient) {
  mcpClient.on('serverConnected', (data) => {
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É: ${data.serverId}`)
  })

  mcpClient.on('serverConnectionFailed', (data) => {
    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É ${data.serverId}: ${data.error}`)
  })

  mcpClient.on('serverDisconnected', (data) => {
    console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${data.serverId}`)
  })

  mcpClient.on('toolCalled', (data) => {
    console.log(`üîß –í—ã–∑–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${data.toolName} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${data.serverId}`)
  })

  mcpClient.on('toolCallFailed', (data) => {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ${data.toolName}: ${data.error}`)
  })

  mcpClient.on('configurationReloaded', () => {
    console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞')
  })
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
async function demonstrateServerStatus(mcpClient: MCPClient) {
  console.log('\nüìä –°—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤\n')

  const serverStatus = mcpClient.getServerStatus()
  const connectedServers = mcpClient.getConnectedServers()

  console.log(`–í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${Object.keys(serverStatus).length}`)
  console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: ${connectedServers.length}`)

  for (const [serverId, status] of Object.entries(serverStatus)) {
    const statusIcon = status.connected ? 'üü¢' : 'üî¥'
    console.log(`${statusIcon} ${serverId}: ${status.connected ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`)
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${status.config.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`)
    console.log(`   –ö–æ–º–∞–Ω–¥–∞: ${MCPUtils.getServerInfo(status.config)}`)
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
async function demonstrateTools(mcpClient: MCPClient) {
  console.log('\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n')

  const connectedServers = mcpClient.getConnectedServers()

  for (const serverId of connectedServers) {
    try {
      console.log(`üìã –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ ${serverId}:`)
      
      const tools = await mcpClient.getTools(serverId)
      
      if (tools.length === 0) {
        console.log('   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤')
        continue
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      tools.forEach((tool, index) => {
        console.log(`   ${index + 1}. ${tool.name}: ${tool.description}`)
      })

      // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      await demonstrateSpecificTools(mcpClient, serverId, tools)

    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${getErrorMessage(error)}`)
    }
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
async function demonstrateSpecificTools(mcpClient: MCPClient, serverId: string, tools: any[]) {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
  const healthTool = tools.find(t => t.name === 'check_health')
  if (healthTool) {
    try {
      console.log('\n   üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã:')
      const healthCall = MCPUtils.createToolCall('check_health', {})
      const healthResult = await mcpClient.callTool(serverId, healthCall)
      
      const healthData = JSON.parse(healthResult.content[0].text)
      console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(healthData, null, 4)}`)
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: ${getErrorMessage(error)}`)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
  const logsTool = tools.find(t => t.name === 'get_logs')
  if (logsTool) {
    try {
      console.log('\n   üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤:')
      const logsCall = MCPUtils.createToolCall('get_logs', { 
        service: 'system', 
        lines: 5,
        level: 'error'
      })
      const logsResult = await mcpClient.callTool(serverId, logsCall)
      
      const logsData = JSON.parse(logsResult.content[0].text)
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏: ${logsData.lines || 0} —Å—Ç—Ä–æ–∫`)
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${getErrorMessage(error)}`)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
  const metricsTool = tools.find(t => t.name === 'get_metrics')
  if (metricsTool) {
    try {
      console.log('\n   üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã:')
      const metricsCall = MCPUtils.createToolCall('get_metrics', { 
        type: 'all',
        timeframe: 'current'
      })
      const metricsResult = await mcpClient.callTool(serverId, metricsCall)
      
      const metricsData = JSON.parse(metricsResult.content[0].text)
      if (metricsData.success && metricsData.data) {
        if (metricsData.data.cpu) {
          console.log(`   CPU: ${metricsData.data.cpu.usage}%`)
        }
        if (metricsData.data.memory) {
          console.log(`   –ü–∞–º—è—Ç—å: ${metricsData.data.memory.usage}% (${metricsData.data.memory.used}MB/${metricsData.data.memory.total}MB)`)
        }
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: ${getErrorMessage(error)}`)
    }
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏
async function demonstrateResources(mcpClient: MCPClient) {
  console.log('\nüìö –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MCP —Ä–µ—Å—É—Ä—Å–æ–≤\n')

  const connectedServers = mcpClient.getConnectedServers()

  for (const serverId of connectedServers) {
    try {
      console.log(`üìñ –†–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞ ${serverId}:`)
      
      const resources = await mcpClient.getResources(serverId)
      
      if (resources.length === 0) {
        console.log('   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤')
        continue
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
      resources.forEach((resource, index) => {
        console.log(`   ${index + 1}. ${resource.name} (${resource.uri})`)
        console.log(`      ${resource.description}`)
      })

      // –ß–∏—Ç–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—Å—É—Ä—Å—ã
      await demonstrateSpecificResources(mcpClient, serverId, resources)

    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: ${getErrorMessage(error)}`)
    }
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
async function demonstrateSpecificResources(mcpClient: MCPClient, serverId: string, resources: any[]) {
  // –ß—Ç–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  const statusResource = resources.find(r => r.uri.includes('status'))
  if (statusResource) {
    try {
      console.log('\n   üìä –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å:')
      const statusContent = await mcpClient.readResource(serverId, statusResource.uri)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
      const preview = statusContent.length > 500 
        ? statusContent.substring(0, 500) + '...'
        : statusContent
      
      console.log(`   ${preview}`)
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${getErrorMessage(error)}`)
    }
  }

  // –ß—Ç–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
  const metricsResource = resources.find(r => r.uri.includes('metrics'))
  if (metricsResource) {
    try {
      console.log('\n   üìà –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:')
      const metricsContent = await mcpClient.readResource(serverId, metricsResource.uri)
      
      try {
        const metricsData = JSON.parse(metricsContent)
        console.log(`   CPU: ${metricsData.cpu?.usage || 'N/A'}%`)
        console.log(`   –ü–∞–º—è—Ç—å: ${metricsData.memory?.usage || 'N/A'}%`)
        console.log(`   –°–µ—Ä–≤–∏—Å—ã: ${Object.keys(metricsData.services || {}).length}`)
      } catch {
        console.log(`   –î–∞–Ω–Ω—ã–µ: ${metricsContent.substring(0, 200)}...`)
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: ${getErrorMessage(error)}`)
    }
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
async function demonstratePrompts(mcpClient: MCPClient) {
  console.log('\nüí≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è MCP –ø—Ä–æ–º–ø—Ç–æ–≤\n')

  const connectedServers = mcpClient.getConnectedServers()

  for (const serverId of connectedServers) {
    try {
      console.log(`üéØ –ü—Ä–æ–º–ø—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ ${serverId}:`)
      
      const prompts = await mcpClient.getPrompts(serverId)
      
      if (prompts.length === 0) {
        console.log('   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤')
        continue
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
      prompts.forEach((prompt, index) => {
        console.log(`   ${index + 1}. ${prompt.name}: ${prompt.description}`)
      })

      // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
      await demonstrateSpecificPrompts(mcpClient, serverId, prompts)

    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: ${getErrorMessage(error)}`)
    }
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
async function demonstrateSpecificPrompts(mcpClient: MCPClient, serverId: string, prompts: any[]) {
  // –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  const diagnosisPrompt = prompts.find(p => p.name === 'system_diagnosis')
  if (diagnosisPrompt) {
    try {
      console.log('\n   üîç –ü—Ä–æ–º–ø—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:')
      const promptResult = await mcpClient.getPrompt(serverId, 'system_diagnosis', { 
        severity: 'medium' 
      })
      
      if (promptResult.messages && promptResult.messages.length > 0) {
        const promptText = promptResult.messages[0].content.text
        console.log(`   ${promptText.substring(0, 300)}...`)
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${getErrorMessage(error)}`)
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
  const recoveryPrompt = prompts.find(p => p.name === 'service_recovery')
  if (recoveryPrompt) {
    try {
      console.log('\n   üîß –ü—Ä–æ–º–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:')
      const promptResult = await mcpClient.getPrompt(serverId, 'service_recovery', { 
        service: 'ai-proxy',
        error: 'Connection timeout'
      })
      
      if (promptResult.messages && promptResult.messages.length > 0) {
        const promptText = promptResult.messages[0].content.text
        console.log(`   ${promptText.substring(0, 300)}...`)
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${getErrorMessage(error)}`)
    }
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞–º—è—Ç—å—é
async function demonstrateMemoryOperations(mcpClient: MCPClient) {
  console.log('\nüß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞–º—è—Ç—å—é\n')

  const memoryServerId = 'memory-mcp'
  
  if (!mcpClient.isServerConnected(memoryServerId)) {
    console.log('‚ùå Memory MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
    return
  }

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç–∏
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç–∏:')
    const updateCall = MCPUtils.createToolCall('update_memory', {
      entity: 'test-entity',
      content: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç–∏ AI –∞–≥–µ–Ω—Ç–∞',
      type: 'fact'
    })
    
    const updateResult = await mcpClient.callTool(memoryServerId, updateCall)
    const updateData = JSON.parse(updateResult.content[0].text)
    console.log(`   ${updateData.success ? '‚úÖ' : '‚ùå'} ${updateData.message}`)

    // –ß—Ç–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    console.log('\nüìñ –ß—Ç–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏:')
    const readCall = MCPUtils.createToolCall('read_memory', {
      entity: 'test-entity'
    })
    
    const readResult = await mcpClient.callTool(memoryServerId, readCall)
    const readData = JSON.parse(readResult.content[0].text)
    
    if (readData.success) {
      console.log(`   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–º—è—Ç–∏ (${readData.content.length} —Å–∏–º–≤–æ–ª–æ–≤):`)
      console.log(`   ${readData.content.substring(0, 200)}...`)
    }

    // –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
    console.log('\nüîç –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏:')
    const searchCall = MCPUtils.createToolCall('search_memory', {
      query: '—Ç–µ—Å—Ç–æ–≤–∞—è',
      limit: 5
    })
    
    const searchResult = await mcpClient.callTool(memoryServerId, searchCall)
    const searchData = JSON.parse(searchResult.content[0].text)
    
    if (searchData.success) {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchData.results.length}`)
      searchData.results.forEach((result: any, index: number) => {
        console.log(`   ${index + 1}. ${result.entity}: ${result.match}`)
      })
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:')
    const statsCall = MCPUtils.createToolCall('get_memory_stats', {})
    
    const statsResult = await mcpClient.callTool(memoryServerId, statsCall)
    const statsData = JSON.parse(statsResult.content[0].text)
    
    if (statsData.success) {
      console.log(`   –°—É—â–Ω–æ—Å—Ç–µ–π: ${statsData.stats.entities.count}`)
      console.log(`   –°–µ—Å—Å–∏–π: ${statsData.stats.sessions.count}`)
      console.log(`   –†–∞–∑–º–µ—Ä: ${statsData.stats.storage.totalSizeMB} MB`)
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–∞–º—è—Ç—å—é: ${getErrorMessage(error)}`)
  }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function demonstrateSystemMonitoring(mcpClient: MCPClient) {
  console.log('\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n')

  const monitorServerId = 'system-monitor-mcp'
  
  if (!mcpClient.isServerConnected(monitorServerId)) {
    console.log('‚ùå System Monitor MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
    return
  }

  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
    console.log('üìà –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã:')
    const metricsCall = MCPUtils.createToolCall('get_metrics', {
      type: 'all',
      timeframe: 'current'
    })
    
    const metricsResult = await mcpClient.callTool(monitorServerId, metricsCall)
    const metricsData = JSON.parse(metricsResult.content[0].text)
    
    if (metricsData.success && metricsData.data) {
      if (metricsData.data.cpu) {
        console.log(`   üñ•Ô∏è CPU: ${metricsData.data.cpu.usage}% (${metricsData.data.cpu.cores} —è–¥–µ—Ä)`)
      }
      if (metricsData.data.memory) {
        console.log(`   üíæ –ü–∞–º—è—Ç—å: ${metricsData.data.memory.usage}% (${metricsData.data.memory.used}/${metricsData.data.memory.total} MB)`)
      }
      if (metricsData.data.disk && metricsData.data.disk.length > 0) {
        metricsData.data.disk.forEach((disk: any) => {
          console.log(`   üíø –î–∏—Å–∫ ${disk.device}: ${disk.usage}% (${disk.usedGB}/${disk.totalGB} GB)`)
        })
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    console.log('\nüîß –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:')
    const servicesCall = MCPUtils.createToolCall('check_services', {})
    
    const servicesResult = await mcpClient.callTool(monitorServerId, servicesCall)
    const servicesData = JSON.parse(servicesResult.content[0].text)
    
    if (servicesData.success) {
      console.log(`   –í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${servicesData.summary.total}`)
      console.log(`   –ó–¥–æ—Ä–æ–≤—ã—Ö: ${servicesData.summary.healthy}`)
      console.log(`   –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö: ${servicesData.summary.unhealthy}`)
      
      Object.entries(servicesData.services).forEach(([service, status]: [string, any]) => {
        const statusIcon = status.status === 'healthy' ? 'üü¢' : 'üî¥'
        console.log(`   ${statusIcon} ${service}: ${status.status}`)
      })
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
    console.log('\nüö® –°–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:')
    const alertsCall = MCPUtils.createToolCall('get_alerts', {
      limit: 10
    })
    
    const alertsResult = await mcpClient.callTool(monitorServerId, alertsCall)
    const alertsData = JSON.parse(alertsResult.content[0].text)
    
    if (alertsData.success) {
      if (alertsData.alerts.length === 0) {
        console.log('   ‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤')
      } else {
        console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: ${alertsData.alerts.length}`)
        alertsData.alerts.slice(0, 5).forEach((alert: any) => {
          const severityIcon: { [key: string]: string } = {
            'critical': 'üî¥',
            'high': 'üü†', 
            'medium': 'üü°',
            'low': 'üü¢'
          }
          const icon = severityIcon[alert.severity] || '‚ö™'
          
          console.log(`   ${icon} [${alert.severity.toUpperCase()}] ${alert.category}: ${alert.message}`)
        })
      }
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${getErrorMessage(error)}`)
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  mcpIntegrationExample()
    .then(() => {
      console.log('\nüéâ –ü—Ä–∏–º–µ—Ä MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\nüí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞:', error)
      process.exit(1)
    })
}

export { mcpIntegrationExample }