#!/usr/bin/env node

/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–ª–∏–∞—Å–æ–≤ –º–æ–¥–µ–ª–µ–π
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –º–æ–¥–µ–ª–µ–π
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–æ–¥–µ–ª—è–º
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –ª–æ–≥–∏–∫–∏
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥–µ–ª–µ–π
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 */

import { AIModelFactory } from '../lib/ai-model-factory'
import type { ModelRequest } from '../lib/model-alias-manager'

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–∏–∞—Å–æ–≤ –º–æ–¥–µ–ª–µ–π...\n')

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const factory = new AIModelFactory({
    enableConfigWatch: true,
    logLevel: 'info'
  })

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  factory.on('initialized', () => {
    console.log('‚úÖ –§–∞–±—Ä–∏–∫–∞ –º–æ–¥–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
  })

  factory.on('requestSuccess', (data) => {
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏: ${data.model} (${data.provider})`)
  })

  factory.on('requestFailed', (data) => {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: ${data.model} (${data.provider})`)
  })

  factory.on('fallbackSuccess', (data) => {
    console.log(`üîÑ –£—Å–ø–µ—à–Ω—ã–π fallback: ${data.originalModel} -> ${data.fallbackModel}`)
  })

  factory.on('configReloaded', () => {
    console.log('üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞')
  })

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await factory.initialize()

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:')
    const models = factory.getAvailableModels()
    models.forEach(model => {
      console.log(`  - ${model.alias}: ${model.provider}:${model.model} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${model.priority})`)
    })

    // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    console.log('\nüí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...')
    const simpleRequest: ModelRequest = {
      messages: [
        { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?' }
      ],
      maxTokens: 100,
      temperature: 0.7
    }

    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const response = await factory.sendDefaultRequest(simpleRequest)
      console.log(`üìù –û—Ç–≤–µ—Ç –æ—Ç ${response.model} (${response.provider}):`)
      console.log(`   "${response.content}"`)
      
      if (response.usage) {
        console.log(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: ${response.usage.totalTokens} (${response.usage.promptTokens} + ${response.usage.completionTokens})`)
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error}`)
    }

    // –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    console.log('\nüí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏...')
    const specificRequest: ModelRequest = {
      messages: [
        { role: 'system', content: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.' },
        { role: 'user', content: '–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ –¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.' }
      ],
      maxTokens: 150,
      temperature: 0.5
    }

    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT-3.5 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
      const gpt35Response = await factory.sendRequest('gpt-3.5', specificRequest)
      console.log(`üìù –û—Ç–≤–µ—Ç –æ—Ç GPT-3.5:`)
      console.log(`   "${gpt35Response.content}"`)
    } catch (error) {
      console.log(`‚ùå GPT-3.5 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error}`)
      
      // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Claude (fallback —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
      try {
        const claudeResponse = await factory.sendRequest('claude-3-haiku', specificRequest)
        console.log(`üìù –û—Ç–≤–µ—Ç –æ—Ç Claude Haiku:`)
        console.log(`   "${claudeResponse.content}"`)
      } catch (claudeError) {
        console.log(`‚ùå Claude —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${claudeError}`)
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥–µ–ª–µ–π
    console.log('\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥–µ–ª–µ–π...')
    const healthResults = await factory.healthCheckAll()
    
    Object.entries(healthResults).forEach(([alias, isHealthy]) => {
      const status = isHealthy ? '‚úÖ –ó–¥–æ—Ä–æ–≤–∞' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      console.log(`  ${alias}: ${status}`)
    })

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:')
    const stats = factory.getStats()
    Object.entries(stats).forEach(([alias, stat]) => {
      console.log(`  ${alias}: ${stat.requests} –∑–∞–ø—Ä–æ—Å–æ–≤, ${stat.failures} –æ—à–∏–±–æ–∫`)
    })

    // –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    console.log('\n‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:')
    const info = factory.getInfo()
    console.log(`  –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${info.configPath}`)
    console.log(`  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${info.configExists}`)
    console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π: ${info.modelsCount}`)

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...')
    try {
      const backupPath = await factory.backupConfig()
      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`)
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error}`)
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
    console.log('\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏...')
    try {
      const currentConfig = factory.getCurrentConfig()
      
      // –ù–∞–π–¥–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const modelToUpdate = currentConfig.models.find(m => m.alias === 'gpt-3.5')
      if (modelToUpdate) {
        // –û–±–Ω–æ–≤–∏–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        factory.updateModel('gpt-3.5', { temperature: 0.9 })
        console.log('‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ gpt-3.5 –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ 0.9')
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: ${error}`)
    }

    console.log('\nüéâ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  } finally {
    // Graceful shutdown
    console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
    await factory.shutdown()
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
  process.exit(0)
})

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...')
  process.exit(0)
})

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  main().catch(console.error)
}

export { main as runExample }