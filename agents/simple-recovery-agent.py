#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π AI –∞–≥–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Traffic Router
–ë–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç Omnara –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import logging
import json
import time
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import psutil
import yaml
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/recovery-agent.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SimpleMemoryManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
    
    def __init__(self, memory_dir: str = "memory"):
        self.memory_dir = Path(memory_dir)
        self.memory_dir.mkdir(exist_ok=True)
        self.entities_dir = self.memory_dir / "entities"
        self.entities_dir.mkdir(exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–∞–º—è—Ç–∏
        self.main_memory_file = self.memory_dir / "system.md"
        self._init_main_memory()
    
    def _init_main_memory(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–∞–º—è—Ç–∏"""
        if not self.main_memory_file.exists():
            initial_content = f"""# Traffic Router System Memory

## System Information
- system_name: Traffic Router with Geolocation
- deployment_date: {datetime.now().isoformat()}
- last_update: {datetime.now().isoformat()}
- status: active
- version: 1.0.0

## System Components
- traffic_router: [[entities/traffic-router.md]]
- ai_proxy: [[entities/ai-proxy.md]]
- monitoring_system: [[entities/monitoring.md]]
- recovery_agent: [[entities/recovery-agent.md]]

## Performance Metrics
- uptime_target: 99.9%
- response_time_target: <200ms
- recovery_time_target: <60s

## Incident History
- total_incidents: 0
- last_incident: none
- recovery_success_rate: 100%

## Learning Notes
- idle_testing_enabled: true
- idle_threshold_minutes: 60
- test_frequency_during_idle: every_30_minutes
"""
            
            with open(self.main_memory_file, 'w', encoding='utf-8') as f:
                f.write(initial_content)
    
    def update_memory(self, entity: str, data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å—É—â–Ω–æ—Å—Ç–∏"""
        entity_file = self.entities_dir / f"{entity}.md"
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if entity_file.exists():
            with open(entity_file, 'r', encoding='utf-8') as f:
                content = f.read()
        else:
            content = f"# {entity.title()}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        timestamp = datetime.now().isoformat()
        new_section = f"\n## Update {timestamp}\n"
        
        for key, value in data.items():
            new_section += f"- {key}: {value}\n"
        
        content += new_section
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(entity_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        logger.info(f"Memory updated for entity: {entity}")

class SimpleRecoveryAgent:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π AI –∞–≥–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self, config_path: str = "config/recovery-config.yaml"):
        self.config = self._load_config(config_path)
        self.memory_manager = SimpleMemoryManager()
        self.services_status = {}
        self.recovery_attempts = {}
        self.max_recovery_attempts = 3
        self.recovery_cooldown = 300  # 5 –º–∏–Ω—É—Ç
        
        logger.info("Simple Recovery Agent initialized")
    
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except FileNotFoundError:
            logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return self._default_config()
    
    def _default_config(self) -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "services": {
                "web": {"port": 3000, "health_endpoint": "/health"},
                "proxy": {"port": 8081, "health_endpoint": "/health"},
                "monitoring": {"port": 8082, "health_endpoint": "/health"}
            },
            "monitoring": {
                "check_interval": 30,
                "timeout": 10
            }
        }
    
    async def check_service_health(self, service_name: str, config: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            port = config.get('port', 8080)
            health_endpoint = config.get('health_endpoint', '/health')
            timeout = self.config.get('monitoring', {}).get('timeout', 10)
            
            url = f"http://localhost:{port}{health_endpoint}"
            
            start_time = time.time()
            response = requests.get(url, timeout=timeout)
            response_time = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            if response.status_code == 200:
                status = "healthy"
                try:
                    health_data = response.json()
                    status = health_data.get('status', 'healthy')
                except:
                    pass
            else:
                status = "unhealthy"
            
            result = {
                "status": status,
                "response_time": response_time,
                "status_code": response.status_code,
                "last_check": datetime.now().isoformat()
            }
            
            logger.info(f"Service {service_name} health check: {status} ({response_time:.2f}ms)")
            return result
            
        except Exception as e:
            logger.error(f"Health check failed for {service_name}: {e}")
            return {
                "status": "unhealthy",
                "error": str(e),
                "last_check": datetime.now().isoformat()
            }
    
    async def monitor_services(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîç Starting service monitoring...")
        
        services = self.config.get('services', {})
        
        for service_name, service_config in services.items():
            health_result = await self.check_service_health(service_name, service_config)
            self.services_status[service_name] = health_result
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å
            self.memory_manager.update_memory(service_name, health_result)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            if health_result['status'] == 'unhealthy':
                await self.handle_service_failure(service_name, service_config)
    
    async def handle_service_failure(self, service_name: str, service_config: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—è —Å–µ—Ä–≤–∏—Å–∞"""
        logger.warning(f"üö® Service failure detected: {service_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        last_attempt = self.recovery_attempts.get(service_name, {}).get('last_attempt', 0)
        if time.time() - last_attempt < self.recovery_cooldown:
            logger.info(f"Service {service_name} is in cooldown period")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        attempts = self.recovery_attempts.get(service_name, {}).get('count', 0)
        if attempts >= self.max_recovery_attempts:
            logger.error(f"Max recovery attempts reached for {service_name}")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å
        await self.attempt_recovery(service_name, service_config)
    
    async def attempt_recovery(self, service_name: str, service_config: Dict[str, Any]):
        """–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info(f"üîß Attempting recovery for {service_name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        if service_name not in self.recovery_attempts:
            self.recovery_attempts[service_name] = {'count': 0, 'last_attempt': 0}
        
        self.recovery_attempts[service_name]['count'] += 1
        self.recovery_attempts[service_name]['last_attempt'] = time.time()
        
        # –ü—Ä–æ—Å—Ç–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
        try:
            port = service_config.get('port', 8080)
            restart_endpoint = f"http://localhost:{port}/restart"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ (–µ—Å–ª–∏ —Ç–∞–∫–æ–π endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            response = requests.post(restart_endpoint, timeout=10)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Recovery attempt successful for {service_name}")
                self.memory_manager.update_memory('recovery_agent', {
                    'last_recovery': datetime.now().isoformat(),
                    'service': service_name,
                    'success': True
                })
            else:
                logger.warning(f"‚ö†Ô∏è Recovery attempt failed for {service_name}: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå Recovery attempt failed for {service_name}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –æ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self.memory_manager.update_memory('recovery_agent', {
            'recovery_attempts': self.recovery_attempts,
            'last_attempt': datetime.now().isoformat()
        })
    
    async def generate_system_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        system_info = {
            "timestamp": datetime.now().isoformat(),
            "uptime": time.time(),
            "services": self.services_status,
            "recovery_attempts": self.recovery_attempts,
            "system_resources": {
                "cpu_percent": psutil.cpu_percent(),
                "memory_percent": psutil.virtual_memory().percent,
                "disk_percent": psutil.disk_usage('/').percent
            }
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å
        self.memory_manager.update_memory('system', system_info)
        
        return system_info
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Simple Recovery Agent –¥–ª—è Traffic Router")
        
        check_interval = self.config.get('monitoring', {}).get('check_interval', 30)
        
        while True:
            try:
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–æ–≤
                await self.monitor_services()
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
                report = await self.generate_system_report()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
                healthy_services = sum(1 for s in self.services_status.values() if s['status'] == 'healthy')
                total_services = len(self.services_status)
                
                logger.info(f"üìä System Status: {healthy_services}/{total_services} services healthy")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(check_interval)
                
            except KeyboardInterrupt:
                logger.info("üõë Monitoring stopped by user")
                break
            except Exception as e:
                logger.error(f"‚ùå Error in monitoring loop: {e}")
                await asyncio.sleep(5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    agent = SimpleRecoveryAgent()
    await agent.start_monitoring()

if __name__ == "__main__":
    asyncio.run(main())
