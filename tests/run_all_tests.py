#!/usr/bin/env python3
"""
Test Runner - Execute All Tests
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import asyncio
import subprocess
import sys
import os
import time
from datetime import datetime
from pathlib import Path
from typing import List, Tuple, Dict, Any

class TestRunner:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
    
    def __init__(self):
        self.test_results: List[Tuple[str, bool, float, str]] = []
        self.start_time = time.time()
        
    def run_sync_test(self, test_name: str, test_script: str) -> Tuple[bool, float, str]:
        """–ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print(f"\nüß™ Running {test_name}...")
        
        start_time = time.time()
        
        try:
            result = subprocess.run(
                [sys.executable, test_script],
                capture_output=True,
                text=True,
                timeout=300  # 5 minutes timeout
            )
            
            execution_time = time.time() - start_time
            
            if result.returncode == 0:
                print(f"‚úÖ {test_name} PASSED ({execution_time:.2f}s)")
                return True, execution_time, result.stdout
            else:
                print(f"‚ùå {test_name} FAILED ({execution_time:.2f}s)")
                print(f"STDOUT: {result.stdout}")
                print(f"STDERR: {result.stderr}")
                return False, execution_time, result.stderr
                
        except subprocess.TimeoutExpired:
            execution_time = time.time() - start_time
            print(f"‚è∞ {test_name} TIMEOUT ({execution_time:.2f}s)")
            return False, execution_time, "Test timed out"
        except Exception as e:
            execution_time = time.time() - start_time
            print(f"üí• {test_name} ERROR ({execution_time:.2f}s): {e}")
            return False, execution_time, str(e)
    
    async def run_async_test(self, test_name: str, test_script: str) -> Tuple[bool, float, str]:
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print(f"\nüß™ Running {test_name}...")
        
        start_time = time.time()
        
        try:
            process = await asyncio.create_subprocess_exec(
                sys.executable, test_script,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=300)
            
            execution_time = time.time() - start_time
            
            if process.returncode == 0:
                print(f"‚úÖ {test_name} PASSED ({execution_time:.2f}s)")
                return True, execution_time, stdout.decode()
            else:
                print(f"‚ùå {test_name} FAILED ({execution_time:.2f}s)")
                print(f"STDOUT: {stdout.decode()}")
                print(f"STDERR: {stderr.decode()}")
                return False, execution_time, stderr.decode()
                
        except asyncio.TimeoutError:
            execution_time = time.time() - start_time
            print(f"‚è∞ {test_name} TIMEOUT ({execution_time:.2f}s)")
            return False, execution_time, "Test timed out"
        except Exception as e:
            execution_time = time.time() - start_time
            print(f"üí• {test_name} ERROR ({execution_time:.2f}s): {e}")
            return False, execution_time, str(e)
    
    def check_test_files(self) -> List[Tuple[str, str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        test_files = [
            ("TypeScript Compilation", "tests/test_typescript_compilation.py"),
            ("Component Units", "tests/test_component_units.py"),
            ("Memory System", "tests/test_memory_system.py"),
            ("Session Management", "tests/test_session_management.py"),
            ("MCP Integration", "tests/test_mcp_integration.py"),
            ("Integration Suite", "tests/test_integration_suite.py")
        ]
        
        available_tests = []
        missing_tests = []
        
        for test_name, test_file in test_files:
            if os.path.exists(test_file):
                available_tests.append((test_name, test_file))
            else:
                missing_tests.append((test_name, test_file))
        
        if missing_tests:
            print("‚ö†Ô∏è Missing test files:")
            for test_name, test_file in missing_tests:
                print(f"   - {test_name}: {test_file}")
        
        print(f"üìã Found {len(available_tests)} available test suites")
        return available_tests
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∞—Ö"""
        total_time = time.time() - self.start_time
        
        passed_tests = sum(1 for _, success, _, _ in self.test_results if success)
        total_tests = len(self.test_results)
        
        report_lines = [
            "=" * 60,
            "üß™ TEST EXECUTION REPORT",
            "=" * 60,
            f"Execution Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"Total Execution Time: {total_time:.2f} seconds",
            f"Tests Passed: {passed_tests}/{total_tests}",
            f"Success Rate: {(passed_tests/total_tests*100):.1f}%" if total_tests > 0 else "N/A",
            "",
            "üìä DETAILED RESULTS:",
            ""
        ]
        
        for test_name, success, exec_time, output in self.test_results:
            status = "‚úÖ PASS" if success else "‚ùå FAIL"
            report_lines.append(f"{status} {test_name} ({exec_time:.2f}s)")
            
            if not success and output:
                # Include first few lines of error output
                error_lines = output.split('\n')[:3]
                for line in error_lines:
                    if line.strip():
                        report_lines.append(f"     {line.strip()}")
        
        report_lines.extend([
            "",
            "=" * 60,
            "üéØ SUMMARY:",
            ""
        ])
        
        if passed_tests == total_tests:
            report_lines.append("üéâ ALL TESTS PASSED! The system is working correctly.")
        elif passed_tests >= total_tests * 0.8:
            report_lines.append("‚úÖ Most tests passed. The system is mostly functional.")
        elif passed_tests >= total_tests * 0.5:
            report_lines.append("‚ö†Ô∏è Some tests failed. The system needs attention.")
        else:
            report_lines.append("‚ùå Many tests failed. The system has significant issues.")
        
        report_lines.append("=" * 60)
        
        return "\n".join(report_lines)
    
    def save_report(self, report: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            # Create reports directory
            reports_dir = Path("reports")
            reports_dir.mkdir(exist_ok=True)
            
            # Generate filename with timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_file = reports_dir / f"test_report_{timestamp}.txt"
            
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write(report)
            
            print(f"\nüìÑ Test report saved to: {report_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Failed to save report: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ Starting Comprehensive Test Suite")
    print("=" * 60)
    
    runner = TestRunner()
    
    # Check available test files
    available_tests = runner.check_test_files()
    
    if not available_tests:
        print("‚ùå No test files found!")
        return 1
    
    print(f"\nüéØ Executing {len(available_tests)} test suites...\n")
    
    # Run all available tests
    for test_name, test_file in available_tests:
        try:
            # Run test asynchronously
            success, exec_time, output = await runner.run_async_test(test_name, test_file)
            runner.test_results.append((test_name, success, exec_time, output))
            
        except Exception as e:
            print(f"üí• Failed to run {test_name}: {e}")
            runner.test_results.append((test_name, False, 0.0, str(e)))
    
    # Generate and display report
    report = runner.generate_report()
    print("\n" + report)
    
    # Save report to file
    runner.save_report(report)
    
    # Return appropriate exit code
    passed_tests = sum(1 for _, success, _, _ in runner.test_results if success)
    total_tests = len(runner.test_results)
    
    if passed_tests == total_tests:
        return 0  # All tests passed
    elif passed_tests >= total_tests * 0.8:
        return 0  # Acceptable pass rate
    else:
        return 1  # Too many failures

def run_quick_syntax_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤"""
    print("üîç Running Quick Syntax Check...")
    
    python_files = [
        "agents/enhanced_recovery_agent_v2.py",
        "lib/mcp-ai-agent-integration.py",
        "lib/memory-manager.py", 
        "lib/session-manager.py",
        "server/memory-mcp-server.py",
        "server/session-mcp-server.py"
    ]
    
    syntax_errors = []
    
    for file_path in python_files:
        if not os.path.exists(file_path):
            continue
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                source = f.read()
            
            compile(source, file_path, 'exec')
            print(f"‚úÖ {file_path} - syntax OK")
            
        except SyntaxError as e:
            print(f"‚ùå {file_path} - syntax error: {e}")
            syntax_errors.append((file_path, str(e)))
        except Exception as e:
            print(f"‚ö†Ô∏è {file_path} - check error: {e}")
    
    if syntax_errors:
        print(f"\n‚ùå Found {len(syntax_errors)} syntax errors:")
        for file_path, error in syntax_errors:
            print(f"   {file_path}: {error}")
        return False
    else:
        print("\n‚úÖ All Python files have valid syntax")
        return True

if __name__ == "__main__":
    print("üß™ Enhanced Recovery Agent - Test Suite")
    print("=" * 60)
    
    # Quick syntax check first
    syntax_ok = run_quick_syntax_check()
    
    if not syntax_ok:
        print("\n‚ùå Syntax errors found. Fix them before running full tests.")
        sys.exit(1)
    
    # Run full test suite
    exit_code = asyncio.run(main())
    sys.exit(exit_code)