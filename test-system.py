#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Traffic Router
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤–∫–ª—é—á–∞—è –ò–ò –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import requests
import time
import json
import logging
from datetime import datetime
from typing import Dict, List, Any
import subprocess
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/system-test.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã Traffic Router"""
    
    def __init__(self):
        self.services = {
            'web': {'port': 13000, 'endpoint': '/'},
            'ai-proxy': {'port': 13081, 'endpoint': '/health'},
            'monitoring': {'port': 13082, 'endpoint': '/health'}
        }
        self.test_results = {}
        self.start_time = time.time()
        
    def log_test_result(self, test_name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        logger.info(f"{status} {test_name}: {details}")
        
        self.test_results[test_name] = {
            'success': success,
            'details': details,
            'timestamp': datetime.now().isoformat()
        }
    
    async def test_service_connectivity(self, service_name: str, config: Dict) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É"""
        try:
            url = f"http://localhost:{config['port']}{config['endpoint']}"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                self.log_test_result(f"Connectivity - {service_name}", True, f"Status: {response.status_code}")
                return True
            else:
                self.log_test_result(f"Connectivity - {service_name}", False, f"Status: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test_result(f"Connectivity - {service_name}", False, str(e))
            return False
    
    async def test_api_endpoints(self) -> bool:
        """–¢–µ—Å—Ç API endpoints"""
        success = True
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI Proxy
        try:
            response = requests.get("http://localhost:13081/api/stats", timeout=10)
            if response.status_code == 200:
                stats = response.json()
                self.log_test_result("API Stats", True, f"Requests: {stats.get('requests', 0)}")
            else:
                self.log_test_result("API Stats", False, f"Status: {response.status_code}")
                success = False
        except Exception as e:
            self.log_test_result("API Stats", False, str(e))
            success = False
        
        # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        try:
            response = requests.get("http://localhost:13082/api/metrics", timeout=10)
            if response.status_code == 200:
                metrics = response.json()
                self.log_test_result("API Metrics", True, f"Uptime: {metrics.get('uptime', 0):.2f}s")
            else:
                self.log_test_result("API Metrics", False, f"Status: {response.status_code}")
                success = False
        except Exception as e:
            self.log_test_result("API Metrics", False, str(e))
            success = False
        
        return success
    
    async def test_ai_agent_functionality(self) -> bool:
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ò–ò –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –ø–∞–º—è—Ç—å
            memory_files = [
                'memory/system.md',
                'memory/entities/traffic-router.md',
                'memory/entities/ai-proxy.md',
                'memory/entities/monitoring.md',
                'memory/entities/recovery-agent.md'
            ]
            
            memory_accessible = True
            for file_path in memory_files:
                if not os.path.exists(file_path):
                    self.log_test_result(f"Memory File - {file_path}", False, "File not found")
                    memory_accessible = False
                else:
                    self.log_test_result(f"Memory File - {file_path}", True, "File exists")
            
            # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
            if os.path.exists('config/recovery-config.yaml'):
                self.log_test_result("Agent Config", True, "Configuration file exists")
            else:
                self.log_test_result("Agent Config", False, "Configuration file missing")
                memory_accessible = False
            
            return memory_accessible
            
        except Exception as e:
            self.log_test_result("AI Agent Functionality", False, str(e))
            return False
    
    async def test_security_features(self) -> bool:
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        success = True
        
        # –¢–µ—Å—Ç rate limiting
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
            for i in range(5):
                response = requests.get("http://localhost:13081/health", timeout=5)
                time.sleep(0.1)
            
            self.log_test_result("Rate Limiting", True, "No rate limit exceeded")
        except Exception as e:
            self.log_test_result("Rate Limiting", False, str(e))
            success = False
        
        # –¢–µ—Å—Ç security headers
        try:
            response = requests.get("http://localhost:13081/health", timeout=10)
            security_headers = [
                'X-Content-Type-Options',
                'X-Frame-Options',
                'X-XSS-Protection'
            ]
            
            headers_present = all(header in response.headers for header in security_headers)
            if headers_present:
                self.log_test_result("Security Headers", True, "All security headers present")
            else:
                self.log_test_result("Security Headers", False, "Some security headers missing")
                success = False
                
        except Exception as e:
            self.log_test_result("Security Headers", False, str(e))
            success = False
        
        return success
    
    async def test_monitoring_system(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        success = True
        
        # –¢–µ—Å—Ç health checks
        try:
            response = requests.get("http://localhost:13082/health", timeout=10)
            if response.status_code == 200:
                health_data = response.json()
                self.log_test_result("Health Check", True, f"Status: {health_data.get('status', 'unknown')}")
            else:
                self.log_test_result("Health Check", False, f"Status: {response.status_code}")
                success = False
        except Exception as e:
            self.log_test_result("Health Check", False, str(e))
            success = False
        
        # –¢–µ—Å—Ç dashboard
        try:
            response = requests.get("http://localhost:13082/monitoring", timeout=10)
            if response.status_code == 200:
                dashboard_data = response.json()
                self.log_test_result("Monitoring Dashboard", True, f"Title: {dashboard_data.get('title', 'Unknown')}")
            else:
                self.log_test_result("Monitoring Dashboard", False, f"Status: {response.status_code}")
                success = False
        except Exception as e:
            self.log_test_result("Monitoring Dashboard", False, str(e))
            success = False
        
        return success
    
    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ Starting comprehensive system test...")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º
        logger.info("üì° Testing service connectivity...")
        for service_name, config in self.services.items():
            await self.test_service_connectivity(service_name, config)
        
        # –¢–µ—Å—Ç API endpoints
        logger.info("üîå Testing API endpoints...")
        await self.test_api_endpoints()
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        logger.info("üîí Testing security features...")
        await self.test_security_features()
        
        # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        logger.info("üìä Testing monitoring system...")
        await self.test_monitoring_system()
        
        # –¢–µ—Å—Ç –ò–ò –∞–≥–µ–Ω—Ç–∞
        logger.info("ü§ñ Testing AI agent functionality...")
        await self.test_ai_agent_functionality()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        await self.generate_test_report()
    
    async def generate_test_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result['success'])
        failed_tests = total_tests - passed_tests
        
        test_duration = time.time() - self.start_time
        
        logger.info("=" * 60)
        logger.info("üìã TEST REPORT")
        logger.info("=" * 60)
        logger.info(f"Total Tests: {total_tests}")
        logger.info(f"Passed: {passed_tests}")
        logger.info(f"Failed: {failed_tests}")
        logger.info(f"Success Rate: {(passed_tests/total_tests)*100:.1f}%")
        logger.info(f"Test Duration: {test_duration:.2f} seconds")
        logger.info("=" * 60)
        
        # –î–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        if failed_tests > 0:
            logger.info("‚ùå FAILED TESTS:")
            for test_name, result in self.test_results.items():
                if not result['success']:
                    logger.info(f"  - {test_name}: {result['details']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report_data = {
            'summary': {
                'total_tests': total_tests,
                'passed_tests': passed_tests,
                'failed_tests': failed_tests,
                'success_rate': (passed_tests/total_tests)*100,
                'test_duration': test_duration,
                'timestamp': datetime.now().isoformat()
            },
            'results': self.test_results
        }
        
        with open('logs/test-report.json', 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìÑ Detailed report saved to: logs/test-report.json")
        
        return passed_tests == total_tests

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SystemTester()
    success = await tester.run_comprehensive_test()
    
    if success:
        logger.info("üéâ All tests passed! System is ready for production.")
        sys.exit(0)
    else:
        logger.error("üí• Some tests failed. Please check the issues above.")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
