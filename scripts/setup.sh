#!/bin/bash
# üöÄ Traffic Router AI Platform - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
# Linux/macOS Bash —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

echo "üöÄ Traffic Router AI Platform v2.0"
echo "   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
echo ""

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS="mac"
elif [[ "$OSTYPE" == "cygwin" ]]; then
    OS="cygwin"
else
    OS="unknown"
    echo "‚ö†Ô∏è  –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OSTYPE"
fi

echo "üñ•Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS"
echo ""

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥—ã
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Linux - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
get_linux_distro() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo $ID
    elif [ -f /etc/redhat-release ]; then
        echo "rhel"
    elif [ -f /etc/debian_version ]; then
        echo "debian"
    else
        echo "unknown"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
install_package() {
    local package=$1
    local name=$2
    
    echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ $name..."
    
    case $OS in
        "linux")
            DISTRO=$(get_linux_distro)
            case $DISTRO in
                "ubuntu"|"debian")
                    sudo apt-get update -qq && sudo apt-get install -y $package
                    ;;
                "fedora"|"centos"|"rhel")
                    sudo dnf install -y $package 2>/dev/null || sudo yum install -y $package
                    ;;
                "arch")
                    sudo pacman -S --noconfirm $package
                    ;;
                *)
                    echo "‚ö†Ô∏è  –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ Linux: $DISTRO"
                    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ $name –≤—Ä—É—á–Ω—É—é"
                    return 1
                    ;;
            esac
            ;;
        "mac")
            if command_exists brew; then
                brew install $package
            else
                echo "‚ùå Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞:"
                echo "   /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
                return 1
            fi
            ;;
        *)
            echo "‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è $OS"
            return 1
            ;;
    esac
}

echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
echo ""

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
echo -n "üü¢ Node.js: "
if command_exists node; then
    NODE_VERSION=$(node --version)
    echo "$NODE_VERSION ‚úÖ"
else
    echo "–ù–µ –Ω–∞–π–¥–µ–Ω"
    case $OS in
        "linux")
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ NodeJS –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö Linux –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤
            DISTRO=$(get_linux_distro)
            case $DISTRO in
                "ubuntu"|"debian")
                    curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                    install_package nodejs "Node.js"
                    ;;
                "fedora"|"centos"|"rhel")
                    install_package nodejs "Node.js"
                    install_package npm "npm"
                    ;;
                *)
                    install_package nodejs "Node.js"
                    ;;
            esac
            ;;
        "mac")
            install_package node "Node.js"
            ;;
    esac
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
echo -n "üü¢ Python: "
if command_exists python3; then
    PYTHON_VERSION=$(python3 --version)
    echo "$PYTHON_VERSION ‚úÖ"
    # –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å python -> python3 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if ! command_exists python; then
        echo "alias python=python3" >> ~/.bashrc
        alias python=python3
    fi
elif command_exists python; then
    PYTHON_VERSION=$(python --version)
    echo "$PYTHON_VERSION ‚úÖ"
else
    echo "–ù–µ –Ω–∞–π–¥–µ–Ω"
    case $OS in
        "linux")
            install_package python3 "Python"
            install_package python3-pip "pip"
            ;;
        "mac")
            install_package python "Python"
            ;;
    esac
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
echo -n "üü¢ pip: "
if command_exists pip3; then
    PIP_VERSION=$(pip3 --version | cut -d' ' -f2)
    echo "$PIP_VERSION ‚úÖ"
    # –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å pip -> pip3 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if ! command_exists pip; then
        echo "alias pip=pip3" >> ~/.bashrc
        alias pip=pip3
    fi
elif command_exists pip; then
    PIP_VERSION=$(pip --version | cut -d' ' -f2)
    echo "$PIP_VERSION ‚úÖ"
else
    echo "–ù–µ –Ω–∞–π–¥–µ–Ω"
    case $OS in
        "linux")
            install_package python3-pip "pip"
            ;;
        "mac")
            echo "pip –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è —Å Python"
            ;;
    esac
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg
echo -n "üü¢ FFmpeg: "
if command_exists ffmpeg; then
    echo "‚úÖ"
else
    echo "–ù–µ –Ω–∞–π–¥–µ–Ω"
    case $OS in
        "linux")
            install_package ffmpeg "FFmpeg"
            ;;
        "mac")
            install_package ffmpeg "FFmpeg"
            ;;
    esac
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
echo -n "üü¢ Git: "
if command_exists git; then
    GIT_VERSION=$(git --version)
    echo "$GIT_VERSION ‚úÖ"
else
    echo "–ù–µ –Ω–∞–π–¥–µ–Ω"
    install_package git "Git"
fi

echo ""
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞..."

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ config.env
if [ ! -f "config.env" ]; then
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ config.env..."
    if [ -f "config.env.example" ]; then
        cp config.env.example config.env
        echo "‚úÖ config.env —Å–æ–∑–¥–∞–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"
    else
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π config.env
        cat > config.env << 'EOF'
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
NODE_ENV=development
PORT=13000
AI_PROXY_PORT=13081
MONITORING_PORT=13082
YOUTUBE_CACHE_PORT=13083
MCP_SERVER_PORT=3001
SOCKS_PROXY_PORT=11080
HTTP_PROXY_PORT=13128

# AI –°–µ—Ä–≤–∏—Å—ã API –∫–ª—é—á–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏)
OPENAI_API_KEY=sk-test-key
ANTHROPIC_API_KEY=test-key
GOOGLE_AI_API_KEY=test-key
HUGGINGFACE_API_KEY=test-key

# YouTube –ö–µ—à –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CACHE_MAX_SIZE_GB=10
CACHE_CLEANUP_INTERVAL_HOURS=24
CACHE_DEFAULT_TTL_HOURS=168

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ª–∞–¥–∫–∞
LOG_LEVEL=info
DEBUG=traffic-router:*
ENABLE_REQUEST_LOGGING=true

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS_PER_MINUTE=100
EOF
        echo "‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π config.env"
    fi
fi

# 7. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if [ -f "package.json" ]; then
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –ø–∞–∫–µ—Ç–æ–≤..."
    if npm install; then
        echo "‚úÖ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    fi
else
    echo "‚ö†Ô∏è  package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

# 8. –ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript
echo "üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript..."
if npm run build:ts; then
    echo "‚úÖ TypeScript —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω"
else
    echo "‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ)"
fi

# 9. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
if [ -f "requirements.txt" ]; then
    echo "üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É pip
    PIP_CMD="pip3"
    if command_exists pip; then
        PIP_CMD="pip"
    fi
    
    if $PIP_CMD install -r requirements.txt; then
        echo "‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
        if [ -f "requirements-agent.txt" ]; then
            if $PIP_CMD install -r requirements-agent.txt; then
                echo "‚úÖ AI-–∞–≥–µ–Ω—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            fi
        fi
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    fi
fi

# 10. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
DIRECTORIES=(
    "logs"
    "data/video-cache"
    "data/video-cache/480p"
    "data/video-cache/640p"
    "data/video-cache/1024p"
    "memory/entities"
)

for dir in "${DIRECTORIES[@]}"; do
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        echo "  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: $dir"
    fi
done

# 11. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
echo "üîê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ..."
find . -name "*.sh" -exec chmod +x {} \;
find agents/ -name "*.py" -exec chmod +x {} \; 2>/dev/null || true

# 12. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
echo ""
echo "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."

ALL_GOOD=true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
COMMANDS=("node" "npm" "python3" "ffmpeg" "git")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º python –≤–º–µ—Å—Ç–æ python3 –µ—Å–ª–∏ python3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
if ! command_exists python3 && command_exists python; then
    COMMANDS[2]="python"
fi

# –ò—Å–ø–æ–ª—å–∑—É–µ–º pip –≤–º–µ—Å—Ç–æ pip3 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if command_exists pip3; then
    COMMANDS+=("pip3")
elif command_exists pip; then
    COMMANDS+=("pip")
fi

for cmd in "${COMMANDS[@]}"; do
    if command_exists "$cmd"; then
        echo "  ‚úÖ $cmd"
    else
        echo "  ‚ùå $cmd - –Ω–µ –Ω–∞–π–¥–µ–Ω"
        ALL_GOOD=false
    fi
done

echo ""

if [ "$ALL_GOOD" = true ]; then
    echo "üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!"
    echo ""
    echo "üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo "   npm run dev:all"
    echo ""
    echo "üåê –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ:"
    echo "   ‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:       http://localhost:13000"
    echo "   ‚Ä¢ YouTube –ø–ª–µ–µ—Ä:       http://localhost:13000/video-player-demo"
    echo "   ‚Ä¢ AI Proxy:            http://localhost:13081/health"
    echo "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:          http://localhost:13082/monitoring"
    echo "   ‚Ä¢ YouTube API:         http://localhost:13083/api/stats"
    echo ""
    echo "ü§ñ –î–ª—è –∑–∞–ø—É—Å–∫–∞ AI-–∞–≥–µ–Ω—Ç–∞:"
    if command_exists python3; then
        echo "   python3 agents/start-recovery-agent.py"
    else
        echo "   python agents/start-recovery-agent.py"
    fi
    echo ""
    echo "‚öôÔ∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ –≤ config.env –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!"
else
    echo "‚ö†Ô∏è  –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò"
    echo "   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
fi

echo ""
echo "üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ README.md"