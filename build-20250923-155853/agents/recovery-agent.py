#!/usr/bin/env python3
"""
AI Recovery Agent –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Omnara –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Mem-Agent –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–π –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
"""

import asyncio
import json
import logging
import os
import subprocess
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import psutil
import requests
from omnara import OmnaraClient, AgentConfig
import docker
import yaml
import markdown
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('recovery-agent.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MemoryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Mem-Agent"""
    
    def __init__(self, memory_dir: str = "memory"):
        self.memory_dir = Path(memory_dir)
        self.memory_dir.mkdir(exist_ok=True)
        self.entities_dir = self.memory_dir / "entities"
        self.entities_dir.mkdir(exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–∞–º—è—Ç–∏
        self.main_memory_file = self.memory_dir / "system.md"
        self._init_main_memory()
    
    def _init_main_memory(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–∞–º—è—Ç–∏"""
        if not self.main_memory_file.exists():
            initial_content = """# Traffic Router System Memory

## System Information
- system_name: Traffic Router with Geolocation
- deployment_date: {date}
- last_update: {date}
- status: active
- version: 1.0.0

## System Components
- traffic_router: [[entities/traffic-router.md]]
- ai_proxy: [[entities/ai-proxy.md]]
- monitoring_system: [[entities/monitoring.md]]
- recovery_agent: [[entities/recovery-agent.md]]

## Performance Metrics
- uptime_target: 99.9%
- response_time_target: <200ms
- recovery_time_target: <60s

## Incident History
- total_incidents: 0
- last_incident: none
- recovery_success_rate: 100%

## Learning Notes
- idle_testing_enabled: true
- idle_threshold_minutes: 60
- test_frequency_during_idle: every_30_minutes
""".format(date=datetime.now().isoformat())
            
            with open(self.main_memory_file, 'w', encoding='utf-8') as f:
                f.write(initial_content)
    
    def update_memory(self, entity: str, data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏"""
        entity_file = self.entities_dir / f"{entity}.md"
        
        # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        existing_content = ""
        if entity_file.exists():
            with open(entity_file, 'r', encoding='utf-8') as f:
                existing_content = f.read()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        timestamp = datetime.now().isoformat()
        
        if entity == "traffic-router":
            content = f"""# Traffic Router Service

## Current Status
- status: {data.get('status', 'unknown')}
- last_check: {timestamp}
- port: {data.get('port', 8080)}
- response_time: {data.get('response_time', 'N/A')}ms

## Performance History
- average_response_time: {data.get('avg_response_time', 'N/A')}ms
- uptime_percentage: {data.get('uptime', 'N/A')}%
- total_requests: {data.get('total_requests', 0)}

## Recent Issues
{self._format_issues(data.get('issues', []))}

## Recovery Actions
{self._format_recovery_actions(data.get('recovery_actions', []))}

## Learning Insights
{self._format_insights(data.get('insights', []))}
"""
        
        elif entity == "idle-testing":
            content = f"""# Idle Testing System

## Configuration
- idle_threshold: 60 minutes
- test_interval_during_idle: 30 minutes
- last_traffic_detected: {data.get('last_traffic', 'N/A')}
- idle_since: {data.get('idle_since', 'N/A')}

## Test Results
{self._format_test_results(data.get('test_results', []))}

## Performance During Idle
- tunnel_latency: {data.get('tunnel_latency', 'N/A')}ms
- connection_stability: {data.get('connection_stability', 'N/A')}%
- resource_usage: {data.get('resource_usage', 'N/A')}%

## Optimization Insights
{self._format_optimization_insights(data.get('optimizations', []))}
"""
        
        else:
            # –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
            content = f"""# {entity.replace('-', ' ').title()}

## Status
- last_update: {timestamp}
- status: {data.get('status', 'unknown')}

## Data
{self._format_generic_data(data)}
"""
        
        with open(entity_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        logger.info(f"–ü–∞–º—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏: {entity}")
    
    def _format_issues(self, issues: List[Dict]) -> str:
        if not issues:
            return "- No recent issues"
        
        formatted = []
        for issue in issues[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–æ–±–ª–µ–º
            formatted.append(f"- {issue.get('timestamp', 'N/A')}: {issue.get('description', 'Unknown issue')}")
        
        return "\n".join(formatted)
    
    def _format_recovery_actions(self, actions: List[Dict]) -> str:
        if not actions:
            return "- No recovery actions taken"
        
        formatted = []
        for action in actions[-5:]:
            formatted.append(f"- {action.get('timestamp', 'N/A')}: {action.get('action', 'Unknown action')} - {action.get('result', 'Unknown result')}")
        
        return "\n".join(formatted)
    
    def _format_insights(self, insights: List[str]) -> str:
        if not insights:
            return "- No insights available"
        
        return "\n".join([f"- {insight}" for insight in insights[-10:]])
    
    def _format_test_results(self, results: List[Dict]) -> str:
        if not results:
            return "- No test results available"
        
        formatted = []
        for result in results[-10:]:
            status = "‚úÖ PASS" if result.get('success') else "‚ùå FAIL"
            formatted.append(f"- {result.get('timestamp', 'N/A')}: {result.get('test_type', 'Unknown')} - {status}")
        
        return "\n".join(formatted)
    
    def _format_optimization_insights(self, optimizations: List[str]) -> str:
        if not optimizations:
            return "- No optimization insights available"
        
        return "\n".join([f"- {opt}" for opt in optimizations[-5:]])
    
    def _format_generic_data(self, data: Dict[str, Any]) -> str:
        formatted = []
        for key, value in data.items():
            if key not in ['status']:
                formatted.append(f"- {key}: {value}")
        
        return "\n".join(formatted) if formatted else "- No additional data"
    
    def get_memory_summary(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–±–∑–æ—Ä–∞ –ø–∞–º—è—Ç–∏"""
        try:
            with open(self.main_memory_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
            lines = content.split('\n')
            summary = []
            
            for line in lines:
                if any(keyword in line.lower() for keyword in ['status:', 'uptime:', 'incidents:', 'success_rate:']):
                    summary.append(line.strip())
            
            return "\n".join(summary)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ –ø–∞–º—è—Ç–∏: {e}")
            return "Memory summary unavailable"

class IdleTestingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è"""
    
    def __init__(self, memory_manager: MemoryManager):
        self.memory_manager = memory_manager
        self.idle_threshold = 60 * 60  # 60 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.test_interval = 30 * 60   # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.last_traffic_time = time.time()
        self.idle_testing_active = False
        self.test_results = []
    
    def update_traffic_activity(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
        self.last_traffic_time = time.time()
        if self.idle_testing_active:
            self.idle_testing_active = False
            logger.info("üîÑ –¢—Ä–∞—Ñ–∏–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ—è")
    
    def is_system_idle(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ—è"""
        return (time.time() - self.last_traffic_time) > self.idle_threshold
    
    async def start_idle_testing(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è"""
        if not self.is_system_idle():
            return
        
        if not self.idle_testing_active:
            self.idle_testing_active = True
            idle_duration = (time.time() - self.last_traffic_time) / 60
            logger.info(f"üß™ –°–∏—Å—Ç–µ–º–∞ –≤ –ø—Ä–æ—Å—Ç–æ–µ {idle_duration:.1f} –º–∏–Ω—É—Ç, –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        test_results = []
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É–Ω–Ω–µ–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        tunnel_test = await self._test_tunnel_connectivity()
        test_results.append(tunnel_test)
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        latency_test = await self._test_latency()
        test_results.append(latency_test)
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤
        ai_test = await self._test_ai_services()
        test_results.append(ai_test)
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        geo_test = await self._test_geolocation()
        test_results.append(geo_test)
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_test = await self._test_system_resources()
        test_results.append(resource_test)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç—å
        self.test_results.extend(test_results)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        idle_data = {
            'last_traffic': datetime.fromtimestamp(self.last_traffic_time).isoformat(),
            'idle_since': datetime.fromtimestamp(self.last_traffic_time).isoformat(),
            'test_results': test_results,
            'tunnel_latency': latency_test.get('latency', 'N/A'),
            'connection_stability': self._calculate_stability(),
            'resource_usage': resource_test.get('cpu_usage', 'N/A'),
            'optimizations': self._generate_optimization_insights(test_results)
        }
        
        self.memory_manager.update_memory('idle-testing', idle_data)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        passed_tests = sum(1 for test in test_results if test.get('success'))
        total_tests = len(test_results)
        
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        
        return test_results
    
    async def _test_tunnel_connectivity(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Ç—É–Ω–Ω–µ–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            start_time = time.time()
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç—É–Ω–Ω–µ–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            test_urls = [
                "https://httpbin.org/ip",
                "https://api.ipify.org",
                "https://ifconfig.me/ip"
            ]
            
            successful_connections = 0
            total_response_time = 0
            
            for url in test_urls:
                try:
                    response = requests.get(url, timeout=10)
                    if response.status_code == 200:
                        successful_connections += 1
                        total_response_time += response.elapsed.total_seconds()
                except:
                    pass
            
            success = successful_connections > 0
            avg_response_time = total_response_time / max(successful_connections, 1)
            
            return {
                'test_type': 'tunnel_connectivity',
                'timestamp': datetime.now().isoformat(),
                'success': success,
                'successful_connections': successful_connections,
                'total_tested': len(test_urls),
                'average_response_time': avg_response_time,
                'details': f"–£—Å–ø–µ—à–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {successful_connections}/{len(test_urls)}"
            }
            
        except Exception as e:
            return {
                'test_type': 'tunnel_connectivity',
                'timestamp': datetime.now().isoformat(),
                'success': False,
                'error': str(e)
            }
    
    async def _test_latency(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        try:
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            test_hosts = [
                "8.8.8.8",
                "1.1.1.1", 
                "208.67.222.222"
            ]
            
            latencies = []
            
            for host in test_hosts:
                try:
                    start_time = time.time()
                    response = requests.get(f"http://{host}", timeout=5)
                    latency = (time.time() - start_time) * 1000
                    latencies.append(latency)
                except:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ping –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
                    try:
                        result = subprocess.run(
                            ["ping", "-c", "1", "-W", "5", host],
                            capture_output=True,
                            text=True
                        )
                        if result.returncode == 0:
                            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –≤—ã–≤–æ–¥–∞ ping
                            output = result.stdout
                            if "time=" in output:
                                time_str = output.split("time=")[1].split()[0]
                                latency = float(time_str)
                                latencies.append(latency)
                    except:
                        pass
            
            if latencies:
                avg_latency = sum(latencies) / len(latencies)
                max_latency = max(latencies)
                min_latency = min(latencies)
                
                return {
                    'test_type': 'latency',
                    'timestamp': datetime.now().isoformat(),
                    'success': True,
                    'latency': avg_latency,
                    'min_latency': min_latency,
                    'max_latency': max_latency,
                    'tested_hosts': len(test_hosts),
                    'successful_tests': len(latencies)
                }
            else:
                return {
                    'test_type': 'latency',
                    'timestamp': datetime.now().isoformat(),
                    'success': False,
                    'error': 'No successful latency measurements'
                }
                
        except Exception as e:
            return {
                'test_type': 'latency',
                'timestamp': datetime.now().isoformat(),
                'success': False,
                'error': str(e)
            }
    
    async def _test_ai_services(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤
            ai_endpoints = [
                "http://localhost:8081/health",
                "http://localhost:8081/api/test"
            ]
            
            successful_tests = 0
            total_response_time = 0
            
            for endpoint in ai_endpoints:
                try:
                    start_time = time.time()
                    response = requests.get(endpoint, timeout=10)
                    response_time = time.time() - start_time
                    
                    if response.status_code == 200:
                        successful_tests += 1
                        total_response_time += response_time
                except:
                    pass
            
            success = successful_tests > 0
            avg_response_time = total_response_time / max(successful_tests, 1) if successful_tests > 0 else 0
            
            return {
                'test_type': 'ai_services',
                'timestamp': datetime.now().isoformat(),
                'success': success,
                'successful_tests': successful_tests,
                'total_endpoints': len(ai_endpoints),
                'average_response_time': avg_response_time,
                'details': f"AI —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã: {successful_tests}/{len(ai_endpoints)}"
            }
            
        except Exception as e:
            return {
                'test_type': 'ai_services',
                'timestamp': datetime.now().isoformat(),
                'success': False,
                'error': str(e)
            }
    
    async def _test_geolocation(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            geo_services = [
                "https://httpbin.org/ip",
                "https://api.ipify.org?format=json",
                "https://ipapi.co/json/"
            ]
            
            detected_locations = []
            
            for service in geo_services:
                try:
                    response = requests.get(service, timeout=10)
                    if response.status_code == 200:
                        data = response.json() if 'json' in service else {'ip': response.text.strip()}
                        detected_locations.append(data)
                except:
                    pass
            
            success = len(detected_locations) > 0
            
            return {
                'test_type': 'geolocation',
                'timestamp': datetime.now().isoformat(),
                'success': success,
                'detected_locations': len(detected_locations),
                'total_services': len(geo_services),
                'details': f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ {len(detected_locations)} —Å–µ—Ä–≤–∏—Å–æ–≤"
            }
            
        except Exception as e:
            return {
                'test_type': 'geolocation',
                'timestamp': datetime.now().isoformat(),
                'success': False,
                'error': str(e)
            }
    
    async def _test_system_resources(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            cpu_usage = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            resource_status = "healthy"
            if cpu_usage > 80 or memory.percent > 80 or disk.percent > 85:
                resource_status = "warning"
            if cpu_usage > 95 or memory.percent > 95 or disk.percent > 95:
                resource_status = "critical"
            
            return {
                'test_type': 'system_resources',
                'timestamp': datetime.now().isoformat(),
                'success': resource_status != "critical",
                'cpu_usage': cpu_usage,
                'memory_usage': memory.percent,
                'disk_usage': disk.percent,
                'resource_status': resource_status,
                'details': f"CPU: {cpu_usage}%, RAM: {memory.percent}%, Disk: {disk.percent}%"
            }
            
        except Exception as e:
            return {
                'test_type': 'system_resources',
                'timestamp': datetime.now().isoformat(),
                'success': False,
                'error': str(e)
            }
    
    def _calculate_stability(self) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.test_results:
            return 0.0
        
        recent_tests = self.test_results[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç–µ—Å—Ç–æ–≤
        successful_tests = sum(1 for test in recent_tests if test.get('success'))
        
        return (successful_tests / len(recent_tests)) * 100 if recent_tests else 0.0
    
    def _generate_optimization_insights(self, test_results: List[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        insights = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        failed_tests = [test for test in test_results if not test.get('success')]
        
        if failed_tests:
            insights.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(failed_tests)} –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è")
        
        # –ê–Ω–∞–ª–∏–∑ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        latency_tests = [test for test in test_results if test.get('test_type') == 'latency']
        if latency_tests:
            avg_latency = sum(test.get('latency', 0) for test in latency_tests) / len(latency_tests)
            if avg_latency > 200:
                insights.append(f"–í—ã—Å–æ–∫–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: {avg_latency:.1f}ms")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_tests = [test for test in test_results if test.get('test_type') == 'system_resources']
        if resource_tests:
            latest_resource = resource_tests[-1]
            if latest_resource.get('cpu_usage', 0) > 50:
                insights.append("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è - –≤–æ–∑–º–æ–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        
        return insights

class TrafficRouterRecoveryAgent:
    """AI –∞–≥–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞"""
    
    def __init__(self, config_path: str = "config/recovery-config.yaml"):
        self.config = self._load_config(config_path)
        self.omnara_client = None
        self.docker_client = docker.from_env()
        self.services_status = {}
        self.recovery_attempts = {}
        self.max_recovery_attempts = 3
        self.recovery_cooldown = 300  # 5 –º–∏–Ω—É—Ç
        
        self.memory_manager = MemoryManager()
        self.idle_testing_manager = IdleTestingManager(self.memory_manager)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Omnara –∫–ª–∏–µ–Ω—Ç–∞
        self._init_omnara_client()
    
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except FileNotFoundError:
            logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return self._default_config()
    
    def _default_config(self) -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "services": {
                "traffic-router": {
                    "port": 8080,
                    "health_endpoint": "/health",
                    "restart_command": "npm run start:router",
                    "docker_container": "traffic-router-main"
                },
                "ai-proxy": {
                    "port": 8081,
                    "health_endpoint": "/health",
                    "restart_command": "npm run start:ai-proxy",
                    "docker_container": "traffic-router-ai-proxy"
                },
                "monitoring": {
                    "port": 8082,
                    "health_endpoint": "/metrics",
                    "restart_command": "npm run start:monitoring",
                    "docker_container": "traffic-router-monitoring"
                }
            },
            "monitoring": {
                "check_interval": 30,
                "timeout": 10,
                "cpu_threshold": 90,
                "memory_threshold": 90,
                "disk_threshold": 85
            },
            "notifications": {
                "telegram_bot_token": os.getenv("TELEGRAM_BOT_TOKEN"),
                "telegram_chat_id": os.getenv("TELEGRAM_CHAT_ID"),
                "email_enabled": True,
                "sms_enabled": False
            }
        }
    
    def _init_omnara_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Omnara –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            config = AgentConfig(
                name="TrafficRouter-Recovery-Agent",
                description="AI –∞–≥–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞",
                version="1.0.0",
                capabilities=[
                    "service_monitoring",
                    "automatic_recovery",
                    "performance_analysis",
                    "predictive_maintenance"
                ]
            )
            
            self.omnara_client = OmnaraClient(config)
            logger.info("Omnara –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Omnara –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            self.omnara_client = None
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI –∞–≥–µ–Ω—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫-—Ä–æ—É—Ç–µ—Ä–∞ —Å Mem-Agent –ø–∞–º—è—Ç—å—é")
        
        if self.omnara_agent:
            await self.omnara_agent.start()
            await self.omnara_agent.log("–ê–≥–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø–∞–º—è—Ç—å—é Markdown –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        idle_testing_task = asyncio.create_task(self._idle_testing_loop())
        
        while True:
            try:
                await self._monitoring_cycle()
                await asyncio.sleep(self.config["monitoring"]["check_interval"])
                
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                idle_testing_task.cancel()
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(10)
    
    async def _idle_testing_loop(self):
        """–¶–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è"""
        while True:
            try:
                if self.idle_testing_manager.is_system_idle():
                    test_results = await self.idle_testing_manager.start_idle_testing()
                    
                    if test_results and self.omnara_agent:
                        failed_tests = [test for test in test_results if not test.get('success')]
                        if failed_tests:
                            await self.omnara_agent.log(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è: {len(failed_tests)} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
                        else:
                            await self.omnara_agent.log("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await asyncio.sleep(self.idle_testing_manager.test_interval)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ—è: {e}")
                await asyncio.sleep(60)
    
    async def _monitoring_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
        self.idle_testing_manager.update_traffic_activity()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        for service_name, service_config in self.config["services"].items():
            await self._check_service_health(service_name, service_config)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        await self._check_system_resources()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏
        await self._check_network_connectivity()
        
        # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫
        await self._analyze_logs()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await self._update_system_memory()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ Omnara
        if self.omnara_agent:
            status_report = self._generate_status_report()
            memory_summary = self.memory_manager.get_memory_summary()
            await self.omnara_agent.log(f"–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status_report}\n\n–ü–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã:\n{memory_summary}")
    
    async def _update_system_memory(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            for service_name, status in self.services_status.items():
                service_data = {
                    'status': status.get('status', 'unknown'),
                    'port': self.config["services"].get(service_name, {}).get('port', 'N/A'),
                    'response_time': status.get('response_time', 'N/A'),
                    'last_check': status.get('last_check', datetime.now()).isoformat() if isinstance(status.get('last_check'), datetime) else str(status.get('last_check', 'N/A'))
                }
                
                self.memory_manager.update_memory(service_name, service_data)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–º—è—Ç–∏
            system_data = {
                'status': 'active',
                'uptime': time.time() - psutil.boot_time(),
                'cpu_usage': psutil.cpu_percent(),
                'memory_usage': psutil.virtual_memory().percent,
                'disk_usage': psutil.disk_usage('/').percent,
                'services_count': len(self.services_status),
                'healthy_services': sum(1 for status in self.services_status.values() if status.get('status') == 'healthy')
            }
            
            self.memory_manager.update_memory('system-status', system_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
    
    async def _check_service_health(self, service_name: str, service_config: Dict[str, Any]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoint
            health_url = f"http://localhost:{service_config['port']}{service_config['health_endpoint']}"
            
            response = requests.get(
                health_url, 
                timeout=self.config["monitoring"]["timeout"]
            )
            
            if response.status_code == 200:
                self.services_status[service_name] = {
                    "status": "healthy",
                    "last_check": datetime.now(),
                    "response_time": response.elapsed.total_seconds()
                }
                logger.info(f"‚úÖ {service_name}: –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                
            else:
                await self._handle_service_failure(service_name, f"HTTP {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            await self._handle_service_failure(service_name, f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        except Exception as e:
            await self._handle_service_failure(service_name, f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    async def _handle_service_failure(self, service_name: str, error_message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        logger.error(f"‚ùå {service_name}: {error_message}")
        
        self.services_status[service_name] = {
            "status": "failed",
            "last_check": datetime.now(),
            "error": error_message
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Omnara
        if self.omnara_agent:
            await self.omnara_agent.log(f"üö® –ö–†–ò–¢–ò–ß–ù–û: –°–µ—Ä–≤–∏—Å {service_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {error_message}")
            await self.omnara_agent.request_input(
                f"–°–µ—Ä–≤–∏—Å {service_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ?",
                options=["–î–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "–ù–µ—Ç, —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–∏—Ç—å", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É"]
            )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        await self._attempt_service_recovery(service_name)
    
    async def _attempt_service_recovery(self, service_name: str):
        """–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        current_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if service_name in self.recovery_attempts:
            last_attempt, attempts = self.recovery_attempts[service_name]
            
            if current_time - last_attempt < timedelta(seconds=self.recovery_cooldown):
                if attempts >= self.max_recovery_attempts:
                    logger.warning(f"‚ö†Ô∏è {service_name}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                    await self._escalate_failure(service_name)
                    return
            else:
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
                self.recovery_attempts[service_name] = (current_time, 0)
        else:
            self.recovery_attempts[service_name] = (current_time, 0)
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
        last_attempt, attempts = self.recovery_attempts[service_name]
        self.recovery_attempts[service_name] = (current_time, attempts + 1)
        
        logger.info(f"üîÑ {service_name}: –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è #{attempts + 1}")
        
        if self.omnara_agent:
            await self.omnara_agent.log(f"–ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ {service_name} (–ø–æ–ø—ã—Ç–∫–∞ #{attempts + 1})")
        
        service_config = self.config["services"][service_name]
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        recovery_strategies = [
            self._restart_docker_container,
            self._restart_process,
            self._full_service_restart,
            self._system_cleanup_and_restart
        ]
        
        for strategy in recovery_strategies:
            try:
                success = await strategy(service_name, service_config)
                if success:
                    logger.info(f"‚úÖ {service_name}: –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    if self.omnara_agent:
                        await self.omnara_agent.log(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_name} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {service_name}: {e}")
        
        # –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        await self._escalate_failure(service_name)
    
    async def _restart_docker_container(self, service_name: str, service_config: Dict[str, Any]) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            container_name = service_config.get("docker_container")
            if not container_name:
                return False
            
            logger.info(f"üê≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container_name}")
            
            container = self.docker_client.containers.get(container_name)
            container.restart()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            container.reload()
            return container.status == "running"
            
        except docker.errors.NotFound:
            logger.warning(f"Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False
    
    async def _restart_process(self, service_name: str, service_config: Dict[str, Any]) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
        try:
            restart_command = service_config.get("restart_command")
            if not restart_command:
                return False
            
            logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {restart_command}")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            await self._kill_service_processes(service_name)
            
            # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            process = await asyncio.create_subprocess_shell(
                restart_command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(15)
            
            return process.returncode is None or process.returncode == 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return False
    
    async def _full_service_restart(self, service_name: str, service_config: Dict[str, Any]) -> bool:
        """–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π"""
        try:
            logger.info(f"üîÑ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ {service_name}")
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            temp_dirs = ["/tmp", "/var/tmp"]
            for temp_dir in temp_dirs:
                subprocess.run(f"find {temp_dir} -name '*{service_name}*' -delete", shell=True)
            
            # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
            log_files = [f"logs/{service_name}.log", f"{service_name}.log"]
            for log_file in log_files:
                if os.path.exists(log_file):
                    open(log_file, 'w').close()
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose
            subprocess.run("docker-compose down", shell=True)
            await asyncio.sleep(5)
            subprocess.run("docker-compose up -d", shell=True)
            
            await asyncio.sleep(30)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            return False
    
    async def _system_cleanup_and_restart(self, service_name: str, service_config: Dict[str, Any]) -> bool:
        """–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
        try:
            logger.info("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫—ç—à–∞
            subprocess.run("sync && echo 3 > /proc/sys/vm/drop_caches", shell=True)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            subprocess.run("systemctl restart networking", shell=True)
            
            # –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            subprocess.run("docker system prune -f", shell=True)
            subprocess.run("docker-compose down && docker-compose up -d", shell=True)
            
            await asyncio.sleep(60)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            return False
    
    async def _kill_service_processes(self, service_name: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                if service_name in ' '.join(proc.info['cmdline'] or []):
                    proc.terminate()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    
    async def _escalate_failure(self, service_name: str):
        """–≠—Å–∫–∞–ª–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏"""
        logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å {service_name}")
        
        if self.omnara_agent:
            await self.omnara_agent.log(f"üö® –ö–†–ò–¢–ò–ß–ù–û: –°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            await self.omnara_agent.request_input(
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service_name}. –î–µ–π—Å—Ç–≤–∏—è:",
                options=[
                    "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", 
                    "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä",
                    "–í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
                ]
            )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await self._send_critical_notification(service_name)
    
    async def _check_system_resources(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            if cpu_percent > self.config["monitoring"]["cpu_threshold"]:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%")
                if self.omnara_agent:
                    await self.omnara_agent.log(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: CPU –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {cpu_percent}%")
            
            # Memory
            memory = psutil.virtual_memory()
            if memory.percent > self.config["monitoring"]["memory_threshold"]:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory.percent}%")
                if self.omnara_agent:
                    await self.omnara_agent.log(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–∞–º—è—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ {memory.percent}%")
            
            # Disk
            disk = psutil.disk_usage('/')
            if disk.percent > self.config["monitoring"]["disk_threshold"]:
                logger.warning(f"‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {disk.percent}%")
                if self.omnara_agent:
                    await self.omnara_agent.log(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {disk.percent}%")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    async def _check_network_connectivity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏"""
        test_urls = [
            "https://8.8.8.8",
            "https://1.1.1.1", 
            "https://google.com",
            "https://github.com"
        ]
        
        failed_connections = 0
        
        for url in test_urls:
            try:
                response = requests.get(url, timeout=5)
                if response.status_code != 200:
                    failed_connections += 1
            except:
                failed_connections += 1
        
        if failed_connections > len(test_urls) / 2:
            logger.error("üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
            if self.omnara_agent:
                await self.omnara_agent.log("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
    
    async def _analyze_logs(self):
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫"""
        log_files = [
            "logs/traffic-router.log",
            "logs/ai-proxy.log", 
            "logs/monitoring.log",
            "/var/log/syslog"
        ]
        
        error_patterns = [
            "ERROR",
            "CRITICAL", 
            "FATAL",
            "Exception",
            "Traceback",
            "Connection refused",
            "Timeout"
        ]
        
        for log_file in log_files:
            if os.path.exists(log_file):
                try:
                    with open(log_file, 'r') as f:
                        recent_lines = f.readlines()[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                        
                    for line in recent_lines:
                        for pattern in error_patterns:
                            if pattern in line:
                                logger.warning(f"üìã –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ {log_file}: {line.strip()}")
                                if self.omnara_agent:
                                    await self.omnara_agent.log(f"–û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∞—Ö: {line.strip()}")
                                break
                                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∞ {log_file}: {e}")
    
    def _generate_status_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        healthy_services = sum(1 for status in self.services_status.values() if status.get("status") == "healthy")
        total_services = len(self.services_status)
        
        return {
            "timestamp": datetime.now().isoformat(),
            "services_healthy": f"{healthy_services}/{total_services}",
            "system_load": psutil.cpu_percent(),
            "memory_usage": psutil.virtual_memory().percent,
            "disk_usage": psutil.disk_usage('/').percent,
            "uptime": time.time() - psutil.boot_time()
        }
    
    async def _send_critical_notification(self, service_name: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        message = f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–µ—Ä–≤–∏—Å {service_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        
        # Telegram
        if self.config["notifications"]["telegram_bot_token"]:
            try:
                telegram_url = f"https://api.telegram.org/bot{self.config['notifications']['telegram_bot_token']}/sendMessage"
                requests.post(telegram_url, {
                    "chat_id": self.config["notifications"]["telegram_chat_id"],
                    "text": message
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    agent = TrafficRouterRecoveryAgent()
    asyncio.run(agent.start_monitoring())
